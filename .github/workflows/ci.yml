name: Build and Test Folly

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-folly:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Folly
        run: |
          git clone https://github.com/facebook/folly.git
          cd folly
          sudo python3 build/fbcode_builder/getdeps.py --allow-system-packages install-system-deps --recursive folly
      
      - name: Fetch and build dependencies
        run: |
          DEPENDENCIES=(
            boost
            ninja
            cmake
            double-conversion
            fast_float
            fmt
            gflags
            glog
            googletest
            libdwarf
            libevent
            zlib
            lz4
            snappy
            zstd
            autoconf
            automake
            libtool
            libiberty
            libsodium
            libunwind
            xz
          )
          cd folly
          for dep in "${DEPENDENCIES[@]}"; do
            echo "Fetching $dep"
            python3 build/fbcode_builder/getdeps.py --allow-system-packages fetch --no-tests $dep
            echo "Building $dep"
            python3 build/fbcode_builder/getdeps.py --allow-system-packages build --free-up-disk --no-tests $dep
          done

      - name: Build and install Folly
        run: |
          cd folly
          python3 build/fbcode_builder/getdeps.py --allow-system-packages build --src-dir=. folly --no-tests  --install-dir /usr/local
          sudo ldconfig
    
      # - name: Verify Folly installation
      #   run: |
      #     sudo ldconfig -p | grep folly

      # - name: Build and run demo
      #   run: |
      #     echo '#include <folly/FBString.h>' > demo.cpp
      #     echo 'int main() { folly::fbstring hello("Hello, Folly!"); return 0; }' >> demo.cpp

      #     LIBS="-lfolly -ldouble-conversion -lgflags -lglog -lboost_context -lboost_regex -lboost_system -lboost_filesystem -lboost_program_options -lboost_thread -lpthread -ldl -levent -lz -llz4 -lsnappy -lzstd -lunwind"

      #     g++ demo.cpp -o demo \
      #       -I/usr/local/include \
      #       -L/usr/local/lib \
      #       $LIBS \
      #       -static
      #     # g++ demo.cpp -o demo -lfolly
      #     ./demo
      - name: Build and run demo with CMake
        run: |
          mkdir demo
          cd demo

          cat <<EOL > CMakeLists.txt
          cmake_minimum_required(VERSION 3.14)
          project(FollyDemo)

          set(CMAKE_CXX_STANDARD 14)

          find_package(folly REQUIRED)

          add_executable(demo demo.cpp)

          target_link_libraries(demo PRIVATE Folly::folly)
          EOL

          cat <<EOF > demo.cpp
          #include <folly/FBString.h>

          int main() {
              folly::fbstring hello("Hello, Folly!");
              return 0;
          }
          EOF

          mkdir build && cd build
          cmake ..
          make -j\$(nproc)

          ./demo

